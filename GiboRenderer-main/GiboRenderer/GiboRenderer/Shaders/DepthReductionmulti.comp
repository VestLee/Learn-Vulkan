#version 450
#extension GL_ARB_separate_shader_objects : enable

#define LOCAL_WORKGROUP_SIZE 32

layout(local_size_x=LOCAL_WORKGROUP_SIZE, local_size_y=LOCAL_WORKGROUP_SIZE, local_size_z=1) in;

layout(set = 0, binding=0, rg32f) uniform image2D input_tex;
layout(set = 0, binding=1, rg32f) uniform image2D output_tex; //coherent restrict writeonly

shared vec2 minmax[LOCAL_WORKGROUP_SIZE * LOCAL_WORKGROUP_SIZE];

void main()
{
    //calculate sample position and clamp to edge
    ivec2 texture_dimensions = imageSize(input_tex);

	//if(gl_GlobalInvocationID.x > texture_dimensions.x - 1 || gl_GlobalInvocationID.y > texture_dimensions.y - 1) return;

    ivec2 sample_pos = ivec2(gl_GlobalInvocationID.xy);
	sample_pos = min(sample_pos, texture_dimensions - 1);

	float mindepth = imageLoad(input_tex, sample_pos).x;
	float maxdepth = imageLoad(input_tex, sample_pos).y;

	//if object is on near plane ignore it and take 2nd smallest value
	//if(mindepth == 0.0f)
      //mindepth = 1.0f;

	if(maxdepth == 1.0f)
	{
	  maxdepth = 0.0f;
	}

	//write to shared array
	minmax[gl_LocalInvocationIndex]= vec2(mindepth, maxdepth); 

	//wait on execution for all threads
	memoryBarrierShared(); // Ensure change to data is visible in other threads
	barrier(); //stall until every thread is finished up to this point
	
	//reduce keep cutting in half and comparing halves to eachother until you have 1 value left
	for(int i = (LOCAL_WORKGROUP_SIZE * LOCAL_WORKGROUP_SIZE) / 2; i > 0; i >>= 1)
	{
		if(gl_LocalInvocationIndex < i)
		{
			minmax[gl_LocalInvocationIndex].x = min(minmax[gl_LocalInvocationIndex].x, minmax[gl_LocalInvocationIndex + i].x);
			minmax[gl_LocalInvocationIndex].y = max(minmax[gl_LocalInvocationIndex].y, minmax[gl_LocalInvocationIndex + i].y);
		}

		memoryBarrierShared(); 
		barrier(); 
	}

	//thread 0 will write the min/max values into the output texture
	if(gl_LocalInvocationIndex == 0)
	{
		//write to shared memory
		imageStore(output_tex, ivec2(gl_WorkGroupID.xy), vec4(minmax[0].x, minmax[0].y,0,0));
	}
}
