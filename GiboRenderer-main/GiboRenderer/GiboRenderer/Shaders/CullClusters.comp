#version 450
#extension GL_ARB_separate_shader_objects : enable

#define LOCAL_WORKGROUP_SIZE 960

layout(local_size_x=LOCAL_WORKGROUP_SIZE, local_size_y=1, local_size_z=1) in;

#define MAX_LIGHTS 30
//readonly lights
struct light_params {
	vec4 position;
	vec4 color;
	vec4 direction;

	float intensity;
	float innerangle;
	float outerangle;
	float falloff;

	float type;
	float cast_shadow;
	float atlas_index;
	float a3;
};

layout(std140, set = 0, binding = 8) uniform light_mainstruct
{
  light_params linfo[MAX_LIGHTS];
} light_data;

layout(set = 0, binding = 9) uniform lightcount_struct 
{
  int count;
} light_count;

//INPUT
layout(set = 0, binding = 1) readonly buffer ActiveClusters
{
  uint active_list[];
} active_clusters;

struct Cluster {
	vec3 min;
	float padding1;
	vec3 max;
	float padding2;
};

layout(set = 0, binding = 2) readonly buffer ClustersArray
{
	Cluster cluster_list[];	
} clusters;

//OUTPUT
layout(set = 0, binding = 6) writeonly buffer indexlist
{
  int list[];
} IndexList;

struct gridval {
	uint offset;
	uint size;
	uint index;
};

layout(set = 0, binding = 7) writeonly buffer Grid
{
  gridval vals[];
} grid;

layout(	push_constant ) uniform InverseCamMatrix
{
	mat4 invcam;
} ubo;

float SqDistPointAABB(vec3 p, vec3 min, vec3 max)
{
	float sqDist = 0.0f;
	for(int i = 0; i < 3; i++)
	{
		// For each axis count any excess distance outside box extents
		float v = p[i];
		if(v < min[i]) sqDist += (min[i] - v) * (min[i] - v);
		if(v > max[i]) sqDist += (v - max[i]) * (v - max[i]);
	}
	return sqDist;
}

//returns true if sphere s intersects AABB b, false otherwise
int TestSphereAABB(float r, vec3 c, vec3 min, vec3 max)
{
	//Compute squared distance between sphere center and AABB
	float sqDist = SqDistPointAABB(c, min, max);
	//Sphere and AABB intersect if the squared distance
	//between them is less than the squared sphere radius
	if(sqDist <= r * r) return 1;
	return 0;
}

shared uint globalindexhead;

//we run this for every cluster. For each cluster go through every light, do an AABB/Sphere intersection and if its intersecting and add to temporary list.
//Now barrier and wait until all clusters done. Now do atomic add with head starting at 0 and each will add its thing to light list and its own grid.
void main()
{
	if(gl_LocalInvocationIndex == 0) { globalindexhead = 0; }
	//gl_NumWorkGroups != 1 error, gl_WorkGroupID > 0 error
	
	//Every thread runs a cluster and gets all the visible lights
	//then they atomic add and reserve a spot and write to the grid and index list
	//if(active_clusters.active_list[gl_GlobalInvocationID.x] == 0) return;
	
	Cluster thread_cluster = clusters.cluster_list[gl_GlobalInvocationID.x];

	uint cluster_light_count = 0;
	int light_array[MAX_LIGHTS];

	vec3 min_ws = vec3(ubo.invcam * vec4(thread_cluster.min, 1));
	vec3 max_ws = vec3(ubo.invcam * vec4(thread_cluster.max, 1));
	for(int i = 0; i < light_count.count; i++)
	{
		//light_data.linfo[i].falloff
		int result = TestSphereAABB(light_data.linfo[i].falloff, vec3(ubo.invcam * light_data.linfo[i].position), thread_cluster.min, thread_cluster.max);
		if(result == 1)
		{
			light_array[cluster_light_count] = i;
			cluster_light_count += 1;
		}
	}

	memoryBarrierShared();
	barrier(); //stall until every thread is finished up to this point

	//fill output data structures
	uint head_index = atomicAdd(globalindexhead, cluster_light_count);

	for(int i = 0; i < cluster_light_count; i++)
	{
		IndexList.list[head_index + i] = light_array[i];
	}

	//uint grid_slot = atomicAdd(arrayindexhead, 1);
	grid.vals[gl_GlobalInvocationID.x].offset = head_index;
	grid.vals[gl_GlobalInvocationID.x].size = cluster_light_count;
	grid.vals[gl_GlobalInvocationID.x].index = gl_GlobalInvocationID.x;
}