#version 450
#extension GL_ARB_separate_shader_objects : enable

#define LOCAL_WORKGROUP_SIZE 32

layout(local_size_x=LOCAL_WORKGROUP_SIZE, local_size_y=LOCAL_WORKGROUP_SIZE, local_size_z=1) in;

layout(set = 0, binding = 2) uniform ReduceBuffer
{
  mat4 proj;
  
  float near;
  float far;
  float a; //0 means single sampling, 1 means multisampling
  float b;
} pv;

layout(set = 0, binding=0) uniform sampler2D depth_prepass;
layout(set = 0, binding=1, rg32f) uniform image2D output_tex; //coherent restrict writeonly
layout(set = 0, binding = 3) uniform sampler2DMS  depth_prepassMS;

shared vec2 minmax[LOCAL_WORKGROUP_SIZE * LOCAL_WORKGROUP_SIZE];

void main()
{
    //calculate sample position and clamp to edge
    ivec2 texture_dimensions;
	if(pv.a == 0.0)
		texture_dimensions = textureSize(depth_prepass, 0);
	else
		texture_dimensions = textureSize(depth_prepassMS);
	
	//if(gl_GlobalInvocationID.x > texture_dimensions.x - 1 || gl_GlobalInvocationID.y > texture_dimensions.y - 1) return;

    ivec2 sample_pos = ivec2(gl_GlobalInvocationID.xy);
	sample_pos = min(sample_pos, texture_dimensions - 1);

	vec2 uv = vec2(sample_pos.xy) / vec2(texture_dimensions.x - 1, texture_dimensions.y - 1);

	float mindepth = 1.0f;
	float maxdepth = 0.0f;

	float depth_value;
	if(pv.a == 0.0)
		depth_value = texture(depth_prepass, uv).r;
	else
		depth_value = texelFetch(depth_prepassMS, sample_pos, 0).r; //gl_SampleID
	//int sample_count = textureSamples(depth_prepassMS);

	//everything is cleared at 1.0f so we don't want to consider those pixels
	if(depth_value < 1.0f) 
	{
	  //convert that depth to linear depth. Just inverse process of (z*proj[2][2] + w*proj[2][3]) / z
	  depth_value = pv.proj[3][2] / (-depth_value - pv.proj[2][2]);
	  depth_value = clamp((-depth_value - pv.near) / (pv.far - pv.near), 0.0, 1.0);

	  maxdepth = max(depth_value, maxdepth);
	  mindepth = min(depth_value, mindepth);
	}

	//write to shared array
	minmax[gl_LocalInvocationIndex]= vec2(mindepth, maxdepth); 

	//wait on execution for all threads
	memoryBarrierShared(); // Ensure change to data is visible in other threads
	barrier(); //stall until every thread is finished up to this point
	
	//reduce keep cutting in half and comparing halves to eachother until you have 1 value left
	for(int i = (LOCAL_WORKGROUP_SIZE * LOCAL_WORKGROUP_SIZE) / 2; i > 0; i >>= 1)
	{ 
		if(gl_LocalInvocationIndex < i)
		{
			minmax[gl_LocalInvocationIndex].x = min(minmax[gl_LocalInvocationIndex].x, minmax[gl_LocalInvocationIndex + i].x);
			minmax[gl_LocalInvocationIndex].y = max(minmax[gl_LocalInvocationIndex].y, minmax[gl_LocalInvocationIndex + i].y);
		}

		memoryBarrierShared(); 
		barrier(); 
	}

	//thread 0 will write the min/max values into the output texture
	if(gl_LocalInvocationIndex == LOCAL_WORKGROUP_SIZE - 1)
	{
		//write to shared memory
		imageStore(output_tex, ivec2(gl_WorkGroupID.xy), vec4(minmax[0].x, minmax[0].y,0,0));
	}
}
