#version 450
#extension GL_ARB_separate_shader_objects : enable


#define WORKGROUP_SIZE 32

layout(local_size_x=1, local_size_y=256, local_size_z=1 ) in;

layout(binding=0, rgba32f) uniform image3D RayleighLUT; //coherent restrict writeonly
layout(binding=2, rgba32f) uniform image3D MieLUT; //coherent restrict writeonly

layout(set = 0, binding = 1) uniform ImageBuffer
{
  vec3 earth_center; //verified
  float width; //verified
  vec3 sun_intensity; //verified
  float height;
  float depth;
 
  float atmosphere_height; //verified
  float earth_radius; //surface height from center of earth  //verified

} image_info;


void GetRaySphereIntersection(in vec3 f3RayOrigin,
                              in vec3 f3RayDirection,
                              in vec3 f3SphereCenter,
                              in float fSphereRadius,
                              out vec2 f2Intersections)
{
    // http://wiki.cgsociety.org/index.php/Ray_Sphere_Intersection
    f3RayOrigin -= f3SphereCenter;
    float A = dot(f3RayDirection, f3RayDirection);
    float B = 2 * dot(f3RayOrigin, f3RayDirection);
    float C = dot(f3RayOrigin,f3RayOrigin) - fSphereRadius*fSphereRadius;
    float D = B*B - 4*A*C;
    // If discriminant is negative, there are no real roots hence the ray misses the
    // sphere
    if( D<0 )
    {
        f2Intersections = vec2(-1,-1);
    }
    else
    {
        D = sqrt(D);
        f2Intersections = vec2(-B - D, -B + D) / (2*A); // A must be positive here!!
    }
}

void GetRaySphereIntersection2(in vec3 f3RayOrigin,
                               in vec3 f3RayDirection,
                               in vec3 f3SphereCenter,
                               in vec2 f2SphereRadius,
                               out vec4 f4Intersections)
{
    // http://wiki.cgsociety.org/index.php/Ray_Sphere_Intersection
    f3RayOrigin -= f3SphereCenter;
    float A = dot(f3RayDirection, f3RayDirection);
    float B = 2 * dot(f3RayOrigin, f3RayDirection);
    vec2 C = dot(f3RayOrigin,f3RayOrigin) - f2SphereRadius*f2SphereRadius;
    vec2 D = B*B - 4*A*C;
    // If discriminant is negative, there are no real roots hence the ray misses the
    // sphere
    vec2 f2RealRootMask = vec2(D.x >= 0, D.y >= 0);
    D = sqrt( max(D,0) );
    f4Intersections =   f2RealRootMask.xxyy * vec4(-B - D.x, -B + D.x, -B - D.y, -B + D.y) / (2*A) + 
                      (1-f2RealRootMask.xxyy) * vec4(-1,-1,-1,-1);
}

#define PARAMETER 1
#define INTEGRATION_STEPS 60
//height above sea level in meters. The thickness of the atmosphere if the molecules and aerosol were uniformly distributed
#define HR 8000.0
#define HM 1200.0
//the scattering coefficient, wavelength depentend for rayleigh, not for mie. Based on index of air, molecular density at sea level
vec3 BR = vec3(5.8e-6, 13.5e-6, 33.1e-6);// 5.8e-6, 13.5e-6, 33.1e-6    6.55e-6, 1.73e-5, 2.30e-5
vec3 BM = vec3(2e-5, 2e-5,2e-5) * .2;//vec3(2e-6, 2e-6,2e-6)   aersol density(.1,5.0)
vec3 BME = vec3(2e-5/0.9, 2e-5/0.9, 2e-5/0.9);   //f4MieExtinctionCoeff[WaveNum] = f4TotalMieSctrCoeff[WaveNum] * (1.f + m_PostProcessingAttribs.m_fAerosolAbsorbtionScale); (0, 5.) default .1
vec3 I = vec3(10,10,10) * .5f; //scattering scale .1-2.0
const float SafetyHeightMargin = 16.f;

float height(in vec3 pos)
{
  return distance(pos, image_info.earth_center.xyz) - image_info.earth_radius;  // distance(pos, image_info.earth_center.xyz + vec3(0,image_info.earth_radius,0)) messed it up!
}

float getDensityMie(in float h)
{
  return exp(-h/HM);
}

float getDensityRayleigh(in float h)
{
  return exp(-h/HR);
}

vec3 Transmittance(in vec3 pa, in vec3 pb)
{
  float stepSize = distance(pa,pb) / INTEGRATION_STEPS; //convert to float?
  vec3 dir = normalize(pb - pa);
  float totalDensityMie = 0;
  float totalDensityRayleigh = 0;
  float previousDensityMie = getDensityMie(height(pa));
  float previousDensityRayleigh = getDensityRayleigh(height(pa));
  for(int step = 1; step <= INTEGRATION_STEPS; step++)
  {
   vec3 s = pa + stepSize*step*dir;
   float currentDensityMie = getDensityMie(height(s));
   float currentDensityRayleigh = getDensityRayleigh(height(s));
   totalDensityMie += (currentDensityMie + previousDensityMie) / 2.0f * stepSize;
   totalDensityRayleigh += (currentDensityRayleigh + previousDensityRayleigh) / 2.0f * stepSize;
   previousDensityMie = currentDensityMie;
   previousDensityRayleigh = currentDensityRayleigh;
  }
  vec3 transmittance = exp(-(totalDensityRayleigh*BR + totalDensityMie*BME));
  return transmittance;
}

//*in their paper their v is point to the viewer mine is pointing outwards
void SingleScattering(in vec3 pa, in vec3 pb, in vec3 v, in vec3 l, out vec3 totalInscatteringMieo, out vec3 totalInscatteringRayleigho)
{
  float stepSize = distance(pa, pb) / INTEGRATION_STEPS;
  vec3 transmittance = vec3(1.0,1.0,1.0);
  vec3 totalInscatteringMie = vec3(0,0,0);
  vec3 totalInscatteringRayleigh = vec3(0,0,0);

  //calculate first values
  vec2 atmosphereIntersections;    
  vec2 earthIntersections;
  vec4 intersections;
  GetRaySphereIntersection2(pa, l, image_info.earth_center.xyz, vec2(image_info.earth_radius + image_info.atmosphere_height, image_info.earth_radius), intersections);
  atmosphereIntersections = intersections.xy;
  earthIntersections = intersections.zw;

  vec3 pc = pa + atmosphereIntersections.y*l;
  transmittance = Transmittance(pa, pc);
  if(earthIntersections.x > 0.0)
  {
	  transmittance = vec3(0,0,0);
  }
  vec3 previousInscatteringMie = getDensityMie(height(pa))*transmittance;
  vec3 previousInscatteringRayleigh = getDensityRayleigh(height(pa)) * transmittance;
  for(int step = 1; step <= INTEGRATION_STEPS ; step++)
  {
    vec3 p = pa + stepSize*step*v;
    transmittance = Transmittance(pa, p);
    vec2 atmosphereIntersections;    
    vec2 earthIntersections;
    vec4 intersections;
    GetRaySphereIntersection2(p, l, image_info.earth_center.xyz, vec2(image_info.earth_radius + image_info.atmosphere_height, image_info.earth_radius), intersections);
    atmosphereIntersections = intersections.xy;
    earthIntersections = intersections.zw;
	
	vec3 pc = p + atmosphereIntersections.y*l;
    transmittance *= Transmittance(p, pc);
	if(earthIntersections.x > 0.0)
	{
	   transmittance = vec3(0,0,0);
	}
    vec3 currentInscatteringMie = getDensityMie(height(p)) *transmittance;
    vec3 currentInscatteringRayleigh = getDensityRayleigh(height(p))* transmittance;

    totalInscatteringMie += (currentInscatteringMie + previousInscatteringMie) / 2 * stepSize;
    totalInscatteringRayleigh += (currentInscatteringRayleigh + previousInscatteringRayleigh) / 2 * stepSize;
    previousInscatteringMie = currentInscatteringMie;
    previousInscatteringRayleigh = currentInscatteringRayleigh;
  }
  totalInscatteringMie *= BM / (4.0*3.14f) * I;
  totalInscatteringRayleigh *= BR / (4.0*3.14f) * I;

  totalInscatteringMieo = totalInscatteringMie;
  totalInscatteringRayleigho = totalInscatteringRayleigh;
}
//1.) convert rgb values to the corrsepnding physical values
//2.) then get v, l, pa, pb, p out of them
//3.) then just plug into the equation
void main()
{
    //convert pixel id to cosl, cosv, h    texture coord is height, viewcos, lightcos (r,g,b)
    ivec3 current_pixel = ivec3(gl_GlobalInvocationID.x, gl_GlobalInvocationID.y, gl_GlobalInvocationID.z);
    vec3 uvw = vec3( current_pixel.x / image_info.width, current_pixel.y / image_info.height, current_pixel.z / image_info.depth);
    uvw = clamp(uvw,0,1);
	//better parameterazation
	float h, cosv, cosl;
	if(PARAMETER == 1)
	{
		//h = uvw.x*uvw.x * (image_info.atmosphere_height);
		//h = clamp(h,SafetyHeightMargin, image_info.atmosphere_height - SafetyHeightMargin); 
		h = uvw.x*uvw.x * (image_info.atmosphere_height - 2*SafetyHeightMargin) + SafetyHeightMargin;

		float cosHorizon = -sqrt(h * (h + 2.0 * image_info.earth_radius)) / (image_info.earth_radius + h);

		float resolutionView = 256.0;
		if(uvw.y > 0.5)
		{
			uvw.y = clamp((uvw.y - (0.5 + 0.5 / resolutionView)), 0.0, 1.0) * resolutionView / (resolutionView / 2.0 - 1.0);
			uvw.y = pow(uvw.y, 5.0);
			cosv = max((cosHorizon + uvw.y * (1 - cosHorizon)), cosHorizon + 1e-4);
		}	
		else
		{
			uvw.y = clamp((uvw.y - 0.5 / resolutionView), 0.0, 1.0) * resolutionView / (resolutionView / 2.0 - 1.0);
			uvw.y = pow(uvw.y, 5.0);
			cosv = min((cosHorizon - uvw.y * (cosHorizon - (-1))), cosHorizon - 1e-4);
		}
		cosv = clamp(cosv, -1.0,1.0);

		cosl = tan((2.0 * uvw.z - 1. + 0.26) * 0.75) / tan(1.26 * 0.75);
		//cosl = tan((2.0 *uvw.z -1.0 + 0.26) * 1.1) / tan(1.26 * 1.1);
		cosl = clamp(cosl, -1.0, 1.0);
	}
	else
	{
		//easier ones
		h = uvw.x * image_info.atmosphere_height;
		// Allowable height range is limited to [SafetyHeightMargin, AtmTopHeight - SafetyHeightMargin] to
		// avoid numeric issues at the Earth surface and the top of the atmosphere
		h = clamp(h,SafetyHeightMargin, image_info.atmosphere_height - SafetyHeightMargin); 
		cosv = uvw.y*2 - 1;
		cosl = uvw.z*2 - 1;
	}
	
    //then get v, l, pa, pb, p out of them vec3 p = image_info.earth_center + vec3(0, image_info.earth_radius + h, 0); //position is just earths center plus players height
    vec3 p2 = vec3(0, h, 0); //position 2 assumes the origin is at the surface, p1 assumes the origin is (0,0,0)

    vec3 v;
   
    v.x = clamp(sqrt(1 - cosv*cosv),0.0,1.0); //symmetric so in our coordinate system this should always be positive
    v.y = cosv;
    v.z = 0;
    v = normalize(v);

    vec3 l;
    l.x = clamp(sqrt(1 - cosl*cosl),0.0,1.0);
    l.y = cosl;
    l.z = 0;
    l = normalize(l);
    
    //pa is first collision with atmosphere or p if its inside, pb is second collision with atmosphere or first if p is inside
    vec3 pa = p2;

	vec4 intersections;
	GetRaySphereIntersection2(pa, v, image_info.earth_center, vec2(image_info.earth_radius + image_info.atmosphere_height, image_info.earth_radius), intersections);
	vec2 atmosphereIntersections = intersections.xy;
	vec2 earthIntersections = intersections.zw;

    vec3 pb = pa + atmosphereIntersections.y*v; //.y should be positive
	if(earthIntersections.x > 0.0)
	{
		pb = pa + earthIntersections.x*v;
	}
	//checked to see if distance(pb,earth_center) == earth_radius
	 
    //fetch single scattering for reyleigh and mie
    vec3 totalInscatteringMie;
    vec3 totalInscatteringRayleigh;
    SingleScattering(pa, pb, v, l, totalInscatteringMie, totalInscatteringRayleigh);
    
    vec4 TotalInScattering;
	TotalInScattering.xyz = totalInscatteringRayleigh;
	
	vec3 Mie = totalInscatteringRayleigh * (totalInscatteringMie.r / totalInscatteringRayleigh.r) * (BR.r / BM.r) * (BM / BR); //3 * 
	if(totalInscatteringRayleigh.r <= 0.00001)
	{
		Mie.r = 0.0;
	}
	TotalInScattering.a = Mie.r;
	
	imageStore(RayleighLUT, ivec3(gl_GlobalInvocationID.xyz), vec4(totalInscatteringRayleigh,1));
	imageStore(MieLUT, ivec3(gl_GlobalInvocationID.xyz), vec4(totalInscatteringMie,1));
}
