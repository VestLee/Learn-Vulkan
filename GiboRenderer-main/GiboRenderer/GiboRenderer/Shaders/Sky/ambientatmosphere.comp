#version 450
#extension GL_ARB_separate_shader_objects : enable


#define WORKGROUP_SIZE 1

layout(local_size_x=32, local_size_y=32, local_size_z=1) in;

layout(binding=0, rgba32f) uniform image2D AmbientLUT; //coherent restrict writeonly
layout(binding=2, rgba32f) uniform image2D TransmittanceLUT; //coherent restrict writeonly

layout(set = 0, binding=3) uniform sampler3D RayleighLUT; 
layout(set = 0, binding=4) uniform sampler3D MieLUT; 

layout(set = 0, binding = 1) uniform ImageBuffer
{
  vec3 earth_center; //verified
  float width; //verified
  vec3 sun_intensity; //verified
  float height;
  float depth;
 
  float atmosphere_height; //verified
  float earth_radius; //surface height from center of earth  //verified

} image_info;


void GetRaySphereIntersection2(in vec3 f3RayOrigin,
                               in vec3 f3RayDirection,
                               in vec3 f3SphereCenter,
                               in vec2 f2SphereRadius,
                               out vec4 f4Intersections)
{
    // http://wiki.cgsociety.org/index.php/Ray_Sphere_Intersection
    f3RayOrigin -= f3SphereCenter;
    float A = dot(f3RayDirection, f3RayDirection);
    float B = 2 * dot(f3RayOrigin, f3RayDirection);
    vec2 C = dot(f3RayOrigin,f3RayOrigin) - f2SphereRadius*f2SphereRadius;
    vec2 D = B*B - 4*A*C;
    // If discriminant is negative, there are no real roots hence the ray misses the
    // sphere
    vec2 f2RealRootMask = vec2(D.x >= 0, D.y >= 0);
    D = sqrt( max(D,0) );
    f4Intersections =   f2RealRootMask.xxyy * vec4(-B - D.x, -B + D.x, -B - D.y, -B + D.y) / (2*A) + 
                      (1-f2RealRootMask.xxyy) * vec4(-1,-1,-1,-1);
}

#define PARAMETER 1
#define INTEGRATION_STEPS 60
#define HR 8000.0
#define HM 1200.0
vec3 BR = vec3(5.8e-6, 13.5e-6, 33.1e-6);// 5.8e-6, 13.5e-6, 33.1e-6    6.55e-6, 1.73e-5, 2.30e-5
vec3 BM = vec3(2e-5, 2e-5,2e-5) * .2;//vec3(2e-6, 2e-6,2e-6)   aersol density(.1,5.0)
vec3 BME = vec3(2e-5/0.9, 2e-5/0.9, 2e-5/0.9);
const float SafetyHeightMargin = 16.f;

float HenyeyGreensteinCornette(float costheta, float g)
{
	float k = (3 * (1 - g * g)) / (2 * (2 + g * g));
	float k2 = (1 + costheta * costheta) / pow(1 + g*g - 2*g*costheta, 1.5);
	return k * k2;
}

float RayleighPhaseModified(float costheta)
{
	return (8 / 10.0) * (7 / 5.0 + .5 * costheta);
}

vec3 GatherAmbient(vec3 N, vec3 L, float cosL)
{
	vec3 gathered = vec3(0.0,0.0,0.0);
	for(float thetav = 0; thetav < 2*3.14f; thetav += ((2*3.14) / INTEGRATION_STEPS))
	{
		float cosV = cos(thetav);
		vec3 V;
		V.x = clamp(sqrt(1 - cosV*cosV),0.0,1.0);
		V.y = cosV;
		V.z = 0;
		V = normalize(V);
	
		float NdotV = clamp(dot(N, V), 0.0, 1.0);
		//float us = (cosL + 1) / 2.0;
		//float uv = clamp((cosV + 1) / 2.0, 0.0, 1.0);
		
		//sampling from main lut so need to use their paramerization from our position/lightdir/normal
		vec3 pos = vec3(0,0,0); //ground lighting so assuming everything is on ground. could change if wanted to
		float h = clamp(distance(pos,image_info.earth_center.xyz) - image_info.earth_radius, SafetyHeightMargin, image_info.atmosphere_height - SafetyHeightMargin);
		vec3 Z = normalize(pos - image_info.earth_center.xyz);
		vec3 norm = normalize(V);
		vec3 lightdirnormalized = normalize(L);
		float cosv = dot(norm, Z);
		float cosl = dot(lightdirnormalized, Z); 

		//parametrize it and get entry from LUT
		float uh, uv, us;
		if(PARAMETER == 1)
		{
			//uh = clamp(h / image_info.atmosphere_height, 0.0, 1.0);
			uh = clamp((h - SafetyHeightMargin) / (image_info.atmosphere_height - 2*SafetyHeightMargin), 0.0, 1.0);
			uh = pow(uh, 0.5f);

			float height = max(h, 0.f);
			float resolutionView = 256.0;
			float cosHorizon = -sqrt(height*(2.f*image_info.earth_radius + height)) / (image_info.earth_radius + height);
			if(cosv > cosHorizon)
			{
				float cosViewAngle = max(cosv, cosHorizon + 0.0001f);
				uv = (cosViewAngle - cosHorizon) / (1.f - cosHorizon);
				uv = pow(uv, 0.2f);
				uv = 0.5f + 0.5f / resolutionView + uv * (resolutionView / 2.f - 1.f) / resolutionView;
			}
			else
			{
				float cosViewAngle = min(cosv, cosHorizon - 0.0001f);
				uv = (cosHorizon - cosViewAngle) / (cosHorizon - (-1.f));
				uv = pow(uv, 0.2f);
				uv = 0.5f / resolutionView + uv * (resolutionView / 2.f - 1.f) / resolutionView;
			}

			us = 0.5*(atan(max(cosl, -0.45f)*tan(1.26f*0.75f)) / 0.75f + (1.0 - 0.26f));
			//us = (atan(max(cosl, -0.1975) * tan(1.26 * 1.1)) / 1.1 + (1.0 - 0.26)) * 0.5f;

			vec3 scattCoord = vec3(uh, uv, us);
			scattCoord.xz = ((scattCoord * (vec3(32.0,256.0,32.0) - 1) + 0.5) / vec3(32.0, 256.0, 32.0)).xz;

			uh = scattCoord.x;
			uv = scattCoord.y;
			us = scattCoord.z;
		}
		else
		{
			//easier parametrization
			uh = h / image_info.atmosphere_height;
			uv = clamp((cosv + 1) / 2.0, 0.0, 1.0);
			us = (cosl + 1) / 2.0;
		}


		vec3 Ir = texture(RayleighLUT, vec3(uh, uv, us)).xyz;
		vec3 Im = texture(MieLUT, vec3(uh, uv, us)).xyz; //vec3(gathered.a, gathered.a, gathered.a);
		float costheta = dot(-V, L); 
		Ir *= RayleighPhaseModified(costheta);
		Im *= HenyeyGreensteinCornette(costheta, 0.98f);

		vec3 I = Ir + Im;

		
		gathered += I * NdotV;
	}

	gathered *= (4*3.14) / INTEGRATION_STEPS;

	return gathered;
}


float height(in vec3 pos)
{
  return distance(pos, image_info.earth_center.xyz) - image_info.earth_radius;  // distance(pos, image_info.earth_center.xyz + vec3(0,image_info.earth_radius,0)) messed it up!
}

float getDensityMie(in float h)
{
  return exp(-h/HM);
}

float getDensityRayleigh(in float h)
{
  return exp(-h/HR);
}

vec3 Transmittance(in vec3 pa, in vec3 pb)
{
  float stepSize = distance(pa,pb) / INTEGRATION_STEPS; //convert to float?
  vec3 dir = normalize(pb - pa);
  float totalDensityMie = 0;
  float totalDensityRayleigh = 0;
  float previousDensityMie = getDensityMie(height(pa));
  float previousDensityRayleigh = getDensityRayleigh(height(pa));
  for(int step = 1; step <= INTEGRATION_STEPS; step++)
  {
   vec3 s = pa + stepSize*step*dir;
   float currentDensityMie = getDensityMie(height(s));
   float currentDensityRayleigh = getDensityRayleigh(height(s));
   totalDensityMie += (currentDensityMie + previousDensityMie) / 2.0f * stepSize;
   totalDensityRayleigh += (currentDensityRayleigh + previousDensityRayleigh) / 2.0f * stepSize;
   previousDensityMie = currentDensityMie;
   previousDensityRayleigh = currentDensityRayleigh;
  }
  vec3 transmittance = exp(-(totalDensityRayleigh*BR + totalDensityMie*BME));
  return transmittance;
}

//parametization is N is stored as an angle from (0,2pi) and L is stored as angle (0,pi). Angle is from zenith. 
void main()
{
	//get uv from pixel
	ivec2 current_pixel = ivec2(gl_GlobalInvocationID.x, gl_GlobalInvocationID.y);
	vec2 uv = vec2(current_pixel.x / image_info.width, current_pixel.y / image_info.height);
	uv = clamp(uv, 0.0, 1.0);

	//get N and L from uv
	float cosN = uv.x*2 - 1;
	float cosL = uv.y*2 - 1;

	vec3 N;
	N.x = clamp(sqrt(1 - cosN*cosN),0.0,1.0);
	N.y = cosN;
	N.z = 0;
	N = normalize(N);

	vec3 L;
	L.x = clamp(sqrt(1 - cosL*cosL),0.0,1.0);
    L.y = cosL;
    L.z = 0;
    L = normalize(L);

	//calculate color
	vec3 AmbientColor = GatherAmbient(N, L, cosL);

	//store in 2D LUT
	imageStore(AmbientLUT, ivec2(gl_GlobalInvocationID.xy), vec4(AmbientColor,1)); 


	//CALCULATE TRANSMITTANCE LUT
	float height = uv.x * image_info.atmosphere_height;
	float cosl = uv.y*2 - 1;

	vec3 pos = vec3(0,height,0);
	
	vec3 l;
    l.x = clamp(sqrt(1 - cosl*cosl),0.0,1.0);
    l.y = cosl;
    l.z = 0;
    l = normalize(l);

	vec4 intersections;
	GetRaySphereIntersection2(pos, l, image_info.earth_center, vec2(image_info.earth_radius + image_info.atmosphere_height, image_info.earth_radius), intersections);
	vec2 atmosphereIntersections = intersections.xy;
	vec2 earthIntersections = intersections.zw;

	vec3 pb = pos + atmosphereIntersections.y*l;
	if(earthIntersections.x > 0.0)
	{
		pb = pos + earthIntersections.x*l;
	}

	vec3 transmittance = Transmittance(pos, pb);
	if(earthIntersections.x > 0.0)
	{
		transmittance = vec3(0.0,0.0,0.0);
	}
	imageStore(TransmittanceLUT, ivec2(gl_GlobalInvocationID.xy), vec4(transmittance,1));
}
