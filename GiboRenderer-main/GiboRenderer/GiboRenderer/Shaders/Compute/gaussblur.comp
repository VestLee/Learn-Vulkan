#version 450
#extension GL_ARB_separate_shader_objects : enable

#define LOCAL_WORKGROUP_SIZE 32

layout(local_size_x=LOCAL_WORKGROUP_SIZE, local_size_y=LOCAL_WORKGROUP_SIZE, local_size_z=1) in;

layout(binding=0, rgba16) uniform image2D input_tex;
layout(binding=1, rgba16) uniform image2D output_tex; //coherent restrict writeonly

void main()
{
    ivec2 texture_dimensions = imageSize(input_tex);
	if(gl_GlobalInvocationID.x > texture_dimensions.x - 1 || gl_GlobalInvocationID.y > texture_dimensions.y - 1) return;

    ivec2 current_pixel = ivec2(gl_GlobalInvocationID.x, gl_GlobalInvocationID.y);
    ivec2 left_pixel = ivec2((gl_GlobalInvocationID.x-1), gl_GlobalInvocationID.y);
    ivec2 right_pixel = ivec2((gl_GlobalInvocationID.x+1), gl_GlobalInvocationID.y);
    ivec2 top_pixel = ivec2(gl_GlobalInvocationID.x, (gl_GlobalInvocationID.y+1));
    ivec2 bottom_pixel = ivec2(gl_GlobalInvocationID.x, (gl_GlobalInvocationID.y-1));
    ivec2 topleft_pixel = ivec2((gl_GlobalInvocationID.x-1), (gl_GlobalInvocationID.y+1));
    ivec2 topright_pixel = ivec2((gl_GlobalInvocationID.x+1), (gl_GlobalInvocationID.y+1));
    ivec2 bottomleft_pixel = ivec2((gl_GlobalInvocationID.x-1), (gl_GlobalInvocationID.y-1));
    ivec2 bottomright_pixel = ivec2((gl_GlobalInvocationID.x+1), (gl_GlobalInvocationID.y-1));
    
    vec4 total = 1*imageLoad(input_tex, topleft_pixel)    + 2*imageLoad(input_tex, top_pixel)     + 1*imageLoad(input_tex, topright_pixel) +
 		 2*imageLoad(input_tex, left_pixel)       + 4*imageLoad(input_tex, current_pixel) + 2*imageLoad(input_tex, right_pixel)    +
		 1*imageLoad(input_tex, bottomleft_pixel) + 2*imageLoad(input_tex, bottom_pixel)  + 1*imageLoad(input_tex, bottomright_pixel);
    
    total = total / 16;
    vec4 color = total;

    imageStore(output_tex, ivec2(gl_GlobalInvocationID.xy), color);
}
