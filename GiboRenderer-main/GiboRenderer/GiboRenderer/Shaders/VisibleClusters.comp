#version 450
#extension GL_ARB_separate_shader_objects : enable

#define LOCAL_WORKGROUP_SIZE 32

layout(local_size_x=LOCAL_WORKGROUP_SIZE, local_size_y=LOCAL_WORKGROUP_SIZE, local_size_z=1) in;

layout(set = 0, binding=0) uniform sampler2D depth_prepass;
layout(set = 0, binding = 3) uniform sampler2DMS  depth_prepassMS;

const int x_size = 8;
const int y_size = 8;
const int z_size = 15;

layout(set = 0, binding = 2) uniform FrustrumBuffer
{
  mat4 proj;
  
  float near;
  float far;
  float a; //0 means single sampling, 1 means multisampling
  float b;
} pv;

layout(set = 0, binding = 4) writeonly buffer ActiveClusters
{
	uint active_list[];
} active_clusters;

//Okay so we have a function that maps [0,s]->(-n,-f) function=-n(f/n)^x/s s is depth_slices.
//The inverse functions maps (-n,-f)->(0,s) and is defined below. We make sure input depth is negative and the near and far values are positive.
//we also make sure the inputs are correct we need to pass in a range -n,-f or in this case I clamp the output between 0 and s.
//*we want the slices to go to 0,s-1 not 0,s
//the depth should be a number between near_plane - far_plane
int DepthSlice(float depth)
{
	return clamp(int(floor(log(-depth)*(z_size/log(pv.far/pv.near)) - ((z_size*log(pv.near)) / log(pv.far/pv.near)))), 0, z_size); //minus 1 for edge case. could get rid and everything at far plane isn't valid
}

int GetClusterIndex(float depth, vec2 uv)
{
	//depth is in nonlinear clip space between 0 and 1
	//convert depth to linear depth.
	depth = pv.proj[3][2] / (-depth - pv.proj[2][2]);
	depth = clamp((-depth - pv.near) / (pv.far - pv.near), 0.0, 1.0);
	
	//convert to actual camera space z value. Use negative z values
	depth = -pv.near + (-pv.far+pv.near)*depth;
	//[0,1]nonlinear -> [0,1]linear -> [-n,-f]

	int x_bucket = clamp(int(floor(uv.x * x_size)), 0, x_size-1); //this is just for edge case if uv.x == 1 it actually goes to two which could just be ignored
	int y_bucket = clamp(int(floor(uv.y * y_size)), 0, y_size - 1); //same as x
	int z_bucket = DepthSlice(depth);

	int cluster_index = z_bucket*x_size*y_size + x_bucket*y_size + y_bucket;

	return cluster_index;
}

//loop through every pixel of depth-prepass. Get its z value and calculate which cluster it is in based on how we generated them. Not AABB because we want a unique one.
//Each AABB contains the cluster and if it intersects multiple AABB its okay to just set that 1 cluster and rest to false.
//all clusters start as false, if we have a pixel in it though we set it to tru
//*not using this right now. Make sure to add support for multisampling, and if we want to have more clusters would have to do multiple dispatch system
void main()
{
    ivec2 texture_dimensions;
    texture_dimensions = textureSize(depth_prepass, 0);

    //ivec2 sample_pos = ivec2(gl_GlobalInvocationID.x, (texture_dimensions.y - 1) - gl_GlobalInvocationID.y);
	ivec2 sample_pos = ivec2(gl_GlobalInvocationID.xy);
	sample_pos = min(sample_pos, texture_dimensions - 1); //shaders that are "out of bounds" can just get clamped and repeat same algorithm

	vec2 uv = vec2(sample_pos.xy) / vec2(texture_dimensions.x - 1, texture_dimensions.y - 1);
	//uv.y = -uv.y;
	float depth = texture(depth_prepass, uv).r;

	//map depth value to a cluster 
	int cluster_index = GetClusterIndex(depth, uv);

	active_clusters.active_list[cluster_index] = 1;
}